from aiogram import Bot, Dispatcher, executor, types
import requests
import os 
import json
#from aiogram.types import ParseMode, Message
from aiogram.utils.markdown import text, bold, code
import re 
import random
from dotenv import load_dotenv
load_dotenv()
#import pprint

HEADERS = {
    "X-API-KEY": os.environ.get("KINOPOISK_API_KEY"),
    "accept": "application/json",
}

#PARAMS = {'page': 1, 'limit': 1, 'genres.name': '–∫–æ–º–µ–¥–∏—è', 'selectFields[]': ['name','poster.url', 'watchability.items.url']}
#PARAMS = {'page': 1, 'limit': 1, 'genres.name': '–∫–æ–º–µ–¥–∏—è', 'selectFields': 'watchability.items.url', 'selectFields': 'poster.url', 'selectFields': 'name'}

PARAMS = [('page', 1), ('limit',5), ('genres.name', '–∫–æ–º–µ–¥–∏—è'), ('selectFields', 'watchability.items.url'), ('selectFields', 'watchability.items.name'), ('selectFields', 'poster.url'), ('selectFields', 'name'), ('selectFields', 'description')]

#print(os.environ.get("TELEGRAM_API_TOKEN"))
bot = Bot(token=os.environ.get("TELEGRAM_API_TOKEN"))
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])

async def send_welcome(message: types.Message):
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä.\n–í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∂–∞–Ω—Ä üé¨'.format(message.from_user), reply_markup=markup)

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ['üçø –ö–æ–º–µ–¥–∏–∏', 'üíî –ú–µ–ª–æ–¥—Ä–∞–º–∞']
markup.add(*buttons)



#markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#item1 = types.KeyboardButton('üçø –ö–æ–º–µ–¥–∏–∏')
#item2 = types.KeyboardButton('üíî –ú–µ–ª–æ–¥—Ä–∞–º–∞')
#item3 = types.KeyboardButton('ü§ç –î—Ä–∞–º–∞')
#item4 = types.KeyboardButton('üîç –î–µ—Ç–µ–∫—Ç–∏–≤')
#item5 = types.KeyboardButton('ü§´ –¢—Ä–∏–ª–ª–µ—Ä')
#item6 = types.KeyboardButton('üò± –£–∂–∞—Å—ã')
#item7 = types.KeyboardButton('üí£ –ë–æ–µ–≤–∏–∫')
#item8 = types.KeyboardButton('‚òÑÔ∏è –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')
#item9 = types.KeyboardButton('üëÄ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è')
#item10 = types.KeyboardButton('‚è≥ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ')
#item11 = types.KeyboardButton('üìù –î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ')
#item12 = types.KeyboardButton('üèÜ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ')
#item13 = types.KeyboardButton('üé• –ê—Ä—Ç—Ö–∞—É—Å')
#item14 = types.KeyboardButton('üéµ –ú—é–∑–∏–∫–ª')
#item15 = types.KeyboardButton('üßÅ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã')

#markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13, item14, item15)

def get_random_movie(genre):
    HEADERS = {
        "X-API-KEY": os.environ.get("KINOPOISK_API_KEY"),
        "accept": "application/json",
    }

    PARAMS = [
        ("page", 1),
        ("limit", 1),
        ("watchability.items", "!null"),
        ("name", "!null"),
        ("description", "!null"),
        ("rating.kp", "5"),
        ("genres.name", genre),
        ("selectFields", "name"),
    ]

    response = requests.get(
        "https://api.kinopoisk.dev/v1/movie",
        params=PARAMS,
        headers=HEADERS,
    )
    movies = response.json()
    total_pages = movies["total"] // movies["limit"] + (
        1 if movies["total"] % movies["limit"] > 0 else 0
    )

    random_page = random.randint(1, total_pages)

    PARAMS_FIELDS = [
        ("page", random_page),
        ("limit", 1),
        ("genres.name", "–∫–æ–º–µ–¥–∏—è"),
        ("watchability.items", "!null"),
        ("name", "!null"),
        ("description", "!null"),
        ("rating.kp", "5"),
        ("selectFields", "watchability.items.url"),
        ("selectFields", "watchability.items.name"),
        ("selectFields", "name"),
        ("selectFields", "description"),
        ("selectFields", "year"),
        ("selectFields", "rating.kp"),
    ]

    response1 = requests.get(
        "https://api.kinopoisk.dev/v1/movie",
        params=PARAMS_FIELDS,
        headers=HEADERS,
    )
    movies = response1.json()
    print(movies)
    return movies["docs"][0]


@dp.message_handler(content_types=["text"])
async def answer(message: types.Message):
    if message.chat.type == "private":
        if message.text == "üçø –ö–æ–º–µ–¥–∏–∏":
            film = get_random_movie("–∫–æ–º–µ–¥–∏—è")
            name = film["name"]
            year = str(film["year"])
            rating = str(film["rating"]["kp"])
            description = film["description"]
            #description = "¬´–û, –ë–æ–∂–µ!!!!... –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!!!... –Ø –≤–µ—Ä–∏–ª–∞ - –°–Ω–µ–∂–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–Ω –µ—Å—Ç—å!!!...–û–Ω –ø–æ—Ö–∏—Ç–∏–ª –º–µ–Ω—è!!! –û–Ω –¥–æ–±—Ä—ã–π!!!... –ú—ã –∏–¥–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏!!!... –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è,  —è –µ–º—É –Ω—Ä–∞–≤–ª—é—Å—å. –í–∞–Ω—è - –¥–∞–π –≥—Ä–∏–±–æ—á–∫–æ–≤!!!¬ª - –≤–æ—Ç —Ç–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ–æ–±—ã—á–∞–π–Ω—ã–π –≤–∏–¥–µ–æ—Ä–µ–ø–æ—Ä—Ç–∞–∂, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ –∫–∞–º–µ—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ –Ω–∞—à–ª–∏ –≤ –ª–µ—Å—É –æ—Ö–æ—Ç–Ω–∏–∫–∏. –ß—Ç–æ —ç—Ç–æ -  —Å–µ–Ω—Å–∞—Ü–∏—è??? –†—É—Å—Å–∫–∏–π –ö–∏–Ω–≥-–ö–æ–Ω–≥??? –ê –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è  –ª—é–±–≤–∏??? –ü–æ–ª–≥–æ–¥–∞ –Ω–∞–∑–∞–¥, –≥–¥–µ-—Ç–æ –Ω–∞ –£—Ä–∞–ª–µ, –≤ —Ç–∞–π–≥–µ, –ø—Ä–æ–ø–∞–ª–∞ —Ç–µ–ª–µ–∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –õ–∞—Ä–∏—Å–∞ –î–µ–±–æ–º–æ–Ω–æ–≤–∞. –ì–¥–µ –æ–Ω–∞  - –Ω–∏–∫–æ–º—É –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ. –î–∞–≤–∞–π—Ç–µ –¥–æ—Å–º–æ—Ç—Ä–∏–º  –¥–æ –∫–æ–Ω—Ü–∞ —ç—Ç–æ—Ç –ø–æ–ª—É—Ç–æ—Ä–∞—á–∞—Å–æ–≤–æ–π —Å—é–∂–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –º—ã —É–∑–Ω–∞–µ–º, —á—Ç–æ –∂–µ —Å –Ω–µ–π —Å–ª—É—á–∏–ª–æ—Å—å."
            links = film["watchability"]["items"]
            linksFiltered = []
            for link in links:
                if link not in linksFiltered:
                    linksFiltered.append(link)
            linkUrls = list(
                map(lambda l: f'[{l["name"]}]({l["url"]})', linksFiltered)
            )  #TODOfilter repetitive keys

            linkUrlsJoined = "\n".join(linkUrls)
            print(links, linkUrls, linkUrlsJoined)
            msg = f"*{re.escape(name)}, {re.escape(year)}*\n*–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞: {re.escape(rating)}*\n{re.escape(description)}\n*–ü—Ä–æ—Å–º–æ—Ç—Ä*\:\n{linkUrlsJoined}"
            await message.answer(msg, parse_mode="MarkdownV2")
            #await message.answer(movie)
            #name = "1\\+\\1"
            #md = "*–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:* "
            #fin = ''.join([md, name])
            #msg = f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:* {name.encode('unicode_escape')}"
            #msg = f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:* {re.escape(name)}"
            #await message.answer("Hello, *world*\!", parse_mode= "MarkdownV2")!!!!+
            #await message.answer(msg, parse_mode= "MarkdownV2")

            

#@dp.message_handler(content_types=['text'])

#def 

#async def answer(message: types.Message):
    #await message.answer(message.text)      this is echo

if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)

bot.polling(non_stop = True)